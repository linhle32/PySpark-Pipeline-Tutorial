{"paragraphs":[{"text":"%md\n# Classification template\n\nThis notebook demonstrates the classification task in data analytics.\n\nIn all examples, we will use the `heart_disease` dataset. The target is to predict whether a patient is having heart disease (`1`) or not (`0`) based on their other information.\n\nWe will first load the data in and process using pipeline like in the `pipeline_template` notebook","user":"anonymous","dateUpdated":"2023-01-24T14:02:19+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>Classification template</h1>\n<p>This notebook demonstrates the classification task in data analytics.</p>\n<p>In all examples, we will use the <code>heart_disease</code> dataset. The target is to predict whether a patient is having heart disease (<code>1</code>) or not (<code>0</code>) based on their other information.</p>\n<p>We will first load the data in and process using pipeline like in the <code>pipeline_template</code> notebook</p>\n"}]},"apps":[],"jobName":"paragraph_1674568838561_-1842541296","id":"20230124-200721_1933496500","dateCreated":"2023-01-24T14:00:38+0000","dateStarted":"2023-01-24T14:02:21+0000","dateFinished":"2023-01-24T14:02:29+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:284728"},{"text":"%spark2.pyspark\n\n#path to data\nhdfs_path = '/tmp/data/'\ndata_file = 'heart_disease.csv'\nsplit_ratio = [0.7, 0.3]\ndrop_cols = ['PatientID']\ninteger_cols = ['Age', 'RestingBP', 'Cholesterol', 'FastingBS', 'MaxHR', 'HeartDisease']\nstring_cols = ['ChestPainType', 'RestingECG', 'ExerciseAngina', 'ST_Slope']\nnumeric_cols = ['Age','RestingBP','Cholesterol','FastingBS','MaxHR','Oldpeak']\ntarget = 'HeartDisease'\n\n\nfrom pyspark.sql.functions import col\nfrom pyspark.sql.types import DoubleType\n\n#read data\ndata = spark.read.options(header='True',inferSchema='True',delimiter=',').csv(hdfs_path+data_file)\n\n#drop columns\ndata = data.drop(*drop_cols)\n\n#cast integer columns to double\nfor c in integer_cols:\n    data = data.withColumn(c, col(c).cast(DoubleType()))\n    \n#train-test split\ndata_train, data_test = data.randomSplit(split_ratio)\n\nfrom pyspark.ml.feature import StringIndexer, OneHotEncoder, Imputer, StandardScaler, VectorAssembler\nfrom pyspark.ml import Pipeline\n\n###one hot encode the categorical columns\nencoders = []\nfor c in string_cols:\n    encoders.append(StringIndexer(inputCol=c, outputCol=c+'Index', handleInvalid='keep'))\n    encoders.append(OneHotEncoder(inputCol=c+'Index', outputCol=c+'Codes'))\n\n###impute the numeric columns\nimputer = Imputer(inputCols = numeric_cols, outputCols = [c+'Imp' for c in numeric_cols], strategy = 'median')\n\n###standardization\nnum_assembler = VectorAssembler(inputCols=[c+'Imp' for c in numeric_cols], outputCol='imputed')\nscaler = StandardScaler(inputCol = 'imputed', outputCol = 'scaled')\n\n###combine results\nassembler = VectorAssembler(inputCols=[c+'Codes' for c in string_cols]+['scaled'], outputCol='features')\n\n\n\n###build pipeline\npipeline = Pipeline(stages = encoders + [imputer, num_assembler, scaler, assembler])\n\n###train pipeline\npipeline_trained = pipeline.fit(data_train)\n\n###process training data annd testing data\ntrain_prc = pipeline_trained.transform(data_train).select(target,'features')\ntest_prc = pipeline_trained.transform(data_test).select(target,'features')","user":"anonymous","dateUpdated":"2023-01-25T05:56:52+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"runtimeInfos":{},"apps":[],"jobName":"paragraph_1674568838594_-1736329764","id":"20230124-141029_1046446419","dateCreated":"2023-01-24T14:00:38+0000","dateStarted":"2023-01-24T14:02:30+0000","dateFinished":"2023-01-24T14:06:35+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:284729"},{"text":"%md\n\n## Modeling\n\nWe will tune and test some common classification models:\n- Logistic regression\n- Decision tree\n- Random forest\n- Gradient boosting model\n- Multilayer Perceptron (Neural networks)\n\nWe can automate the search for the best hyperparamters with Cross Validation Grid Search. In pyspark, we use a combination of `ParamGridBuilder` and `CrossValidator`. The steps are as follows\n1. Create an empty model\n2. Create the parameter grid with `ParamGridBuilder`. Each hyperparameter requires a different `addGrid()` call; multiple `addGrid()` can be chained.\n3. Create the `CrossValidator` object\n    - `estimator`: the empty model\n    - `estimatorParamMaps`: the parameter grid\n    - `evaluator`: the evaluator object (`MulticlassClassificationEvaluator` for classification)\n    - `numFolds`: number of folds for cross validation\n4. Train the CrossValidator with fit()\n\nFirst, we import general libaries and create an evaluator. `metricName` are commonly `f1` or `accuracy`","user":"anonymous","dateUpdated":"2023-01-26T03:51:23+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>Modeling</h2>\n<p>We will tune and test some common classification models:</p>\n<ul>\n<li>Logistic regression</li>\n<li>Decision tree</li>\n<li>Random forest</li>\n<li>Gradient boosting model</li>\n<li>Multilayer Perceptron (Neural networks)</li>\n</ul>\n<p>We can automate the search for the best hyperparamters with Cross Validation Grid Search. In pyspark, we use a combination of <code>ParamGridBuilder</code> and <code>CrossValidator</code>. The steps are as follows</p>\n<ol>\n<li>Create an empty model</li>\n<li>Create the parameter grid with <code>ParamGridBuilder</code>. Each hyperparameter requires a different <code>addGrid()</code> call; multiple <code>addGrid()</code> can be chained.</li>\n<li>Create the <code>CrossValidator</code> object<ul>\n<li><code>estimator</code>: the empty model</li>\n<li><code>estimatorParamMaps</code>: the parameter grid</li>\n<li><code>evaluator</code>: the evaluator object (<code>MulticlassClassificationEvaluator</code> for classification)</li>\n<li><code>numFolds</code>: number of folds for cross validation</li>\n</ul>\n</li>\n<li>Train the CrossValidator with fit()</li>\n</ol>\n<p>First, we import general libaries and create an evaluator. <code>metricName</code> are commonly <code>f1</code> or <code>accuracy</code></p>\n"}]},"apps":[],"jobName":"paragraph_1674568838595_161229577","id":"20230124-211226_580908956","dateCreated":"2023-01-24T14:00:38+0000","dateStarted":"2023-01-26T03:51:23+0000","dateFinished":"2023-01-26T03:51:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:284730"},{"text":"%spark2.pyspark\nfrom pyspark.ml.tuning import CrossValidator, ParamGridBuilder\nfrom pyspark.ml.evaluation import MulticlassClassificationEvaluator\n\nevaluator = MulticlassClassificationEvaluator(labelCol=target, metricName='f1')","user":"anonymous","dateUpdated":"2023-01-24T14:06:40+0000","config":{"tableHide":false,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1674568838595_1194208933","id":"20230125-013755_1884117798","dateCreated":"2023-01-24T14:00:38+0000","dateStarted":"2023-01-24T14:06:41+0000","dateFinished":"2023-01-24T14:06:41+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:284731"},{"text":"%md\n\n### Logistic regression\n\nLogistic regression has one hyperparameters, `regParam` and `elasticNetParam`, to tune\n","user":"anonymous","dateUpdated":"2023-01-26T03:55:19+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false,"completionKey":"TAB"},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Logistic regression</h3>\n<p>Logistic regression has one hyperparameters, <code>regParam</code> and <code>elasticNetParam</code>, to tune</p>\n"}]},"apps":[],"jobName":"paragraph_1674571496961_334532725","id":"20230124-144456_518311964","dateCreated":"2023-01-24T14:44:56+0000","dateStarted":"2023-01-26T03:55:19+0000","dateFinished":"2023-01-26T03:55:19+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:284732"},{"text":"%spark2.pyspark\n\nfrom pyspark.ml.classification import LogisticRegression\n\n#create empty model\nlogistic = LogisticRegression(featuresCol='features', labelCol=target)\n\n#parameter grid for decision tree\nparamGridLogistic = ParamGridBuilder().addGrid(logistic.regParam, [0.001, 0.01, 0.1, 1., 10.])\\\n                                      .addGrid(logistic.elasticNetParam, [0.25, 0.5, 0.75]).build()\n\n#cross validator\ncrossval = CrossValidator(estimator=logistic,\n                          estimatorParamMaps=paramGridLogistic,\n                          evaluator=evaluator,\n                          numFolds=3) \n\n#perform the search\ncvLogistic = crossval.fit(train_prc)\n\n#test the tuned model\ntrain_pred_cvLogistic = cvLogistic.transform(train_prc)\ntest_pred_cvLogistic = cvLogistic.transform(test_prc)\nprint('cross-validation logistic regression')\nprint('training F1: ', evaluator.evaluate(train_pred_cvLogistic))\nprint('testing F1: ', evaluator.evaluate(test_pred_cvLogistic))","user":"anonymous","dateUpdated":"2023-01-25T05:53:27+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"cross-validation logistic regression\n('training F1: ', 0.8529777439466435)\n('testing F1: ', 0.872577764672501)\n"}]},"runtimeInfos":{},"apps":[],"jobName":"paragraph_1674571493321_-279497614","id":"20230124-144453_864533144","dateCreated":"2023-01-24T14:44:53+0000","dateStarted":"2023-01-25T01:16:27+0000","dateFinished":"2023-01-25T01:35:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:284733"},{"text":"%md\n\n### Decision tree\n\nThe two important hyperparameters to tune for decision tree are `maxDepth` and `minInstancesPerNode`","user":"anonymous","dateUpdated":"2023-01-26T03:56:02+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Decision tree</h3>\n<p>The two important hyperparameters to tune for decision tree are <code>maxDepth</code> and <code>minInstancesPerNode</code></p>\n"}]},"apps":[],"jobName":"paragraph_1674568838596_1099614668","id":"20230125-013858_1459512558","dateCreated":"2023-01-24T14:00:38+0000","dateStarted":"2023-01-26T03:56:02+0000","dateFinished":"2023-01-26T03:56:02+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:284734"},{"text":"%spark2.pyspark\n\nfrom pyspark.ml.classification import DecisionTreeClassifier\n\n#create empty model\ndt = DecisionTreeClassifier(featuresCol='features', labelCol=target)\n\n#parameter grid for decision tree\nparamGridTree = ParamGridBuilder().addGrid(dt.maxDepth, [3, 5, 7])\\\n                                  .addGrid(dt.minInstancesPerNode, [10, 20, 30]).build()\n\n#cross validator\ncrossval = CrossValidator(estimator=dt,\n                          estimatorParamMaps=paramGridTree,\n                          evaluator=evaluator,\n                          numFolds=3) \n\n#perform the search\ncvTree = crossval.fit(train_prc)\n\n#test the tuned model\ntrain_pred_cvTree = cvTree.transform(train_prc)\ntest_pred_cvTree = cvTree.transform(test_prc)\nprint('cross-validation decision tree')\nprint('training F1: ', evaluator.evaluate(train_pred_cvTree))\nprint('testing F1: ', evaluator.evaluate(test_pred_cvTree))","user":"anonymous","dateUpdated":"2023-01-24T14:06:42+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"cross-validation decision tree\n('training F1: ', 0.8580293817175548)\n('testing F1: ', 0.8310770136876168)\n"}]},"runtimeInfos":{},"apps":[],"jobName":"paragraph_1674568838596_-528371794","id":"20230208-214159_649015616","dateCreated":"2023-01-24T14:00:38+0000","dateStarted":"2023-01-24T14:06:43+0000","dateFinished":"2023-01-24T14:16:42+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:284735"},{"text":"%md\n\n### Random Forest\n\nRandom Forest is an ensemble of decision trees and usually yields better performances. \n\nSimilar to a tree, we need to tune maxDepth and `minInstancesPerNode`. We also need to tune `numTrees` - the number of trees in a forest model.\n","user":"anonymous","dateUpdated":"2023-01-26T03:56:13+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Random Forest</h3>\n<p>Random Forest is an ensemble of decision trees and usually yields better performances.</p>\n<p>Similar to a tree, we need to tune maxDepth and <code>minInstancesPerNode</code>. We also need to tune <code>numTrees</code> - the number of trees in a forest model.</p>\n"}]},"apps":[],"jobName":"paragraph_1674568838597_-1635969021","id":"20230208-215728_421486885","dateCreated":"2023-01-24T14:00:38+0000","dateStarted":"2023-01-26T03:56:13+0000","dateFinished":"2023-01-26T03:56:14+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:284736"},{"text":"%spark2.pyspark\n\nfrom pyspark.ml.classification import RandomForestClassifier\n\n#initialize model\nrf = RandomForestClassifier(featuresCol='features', labelCol=target)\n\n#paramter grid\nparamGridForest = ParamGridBuilder().addGrid(rf.numTrees, [10, 30, 50])\\\n                                    .addGrid(dt.maxDepth, [3, 5, 7])\\\n                                    .addGrid(dt.minInstancesPerNode, [10, 20, 30])\\\n                                    .build()\n#cross validator\ncrossval = CrossValidator(estimator = rf,\n                          estimatorParamMaps = paramGridForest,\n                          evaluator = evaluator,\n                          numFolds = 3) \n\n#perform tuning\ncvForest = crossval.fit(train_prc)\n\n#test the tuned model\ntrain_pred_cvForest = cvForest.transform(train_prc)\ntest_pred_cvForest = cvForest.transform(test_prc)\n\nprint('cross-validation random forest')\nprint('training F1: ', evaluator.evaluate(train_pred_cvForest))\nprint('testing F1: ', evaluator.evaluate(test_pred_cvForest))","user":"anonymous","dateUpdated":"2023-01-24T14:45:29+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"cross-validation random forest\n('training F1: ', 0.9038743620786964)\n('testing F1: ', 0.8409396703765732)\n"}]},"runtimeInfos":{},"apps":[],"jobName":"paragraph_1674568838597_1391625643","id":"20230125-012717_1194748897","dateCreated":"2023-01-24T14:00:38+0000","dateStarted":"2023-01-24T14:16:51+0000","dateFinished":"2023-01-24T14:44:19+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:284737"},{"text":"%md\n\n<h4>Gradient Boosting Model</h4>\n\nGradient boosting model (GBT) is similar to random forest, however, each tree is added to the ensemble to minimize the current training error instead of randomly.\n\nGBT models still have `maxDepth` and `minInstancesPerNode` to tune, however, we do not tune the numTrees anymore.","user":"anonymous","dateUpdated":"2023-01-24T14:44:19+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h4>Gradient Boosting Model</h4>\n<p>Gradient boosting model (GBT) is similar to random forest, however, each tree is added to the ensemble to minimize the current training error instead of randomly.</p>\n<p>GBT models still have <code>maxDepth</code> and <code>minInstancesPerNode</code> to tune, however, we do not tune the numTrees anymore.</p>\n"}]},"apps":[],"jobName":"paragraph_1674568838598_-77917819","id":"20230125-020425_1224392767","dateCreated":"2023-01-24T14:00:38+0000","dateStarted":"2023-01-24T14:44:24+0000","dateFinished":"2023-01-24T14:44:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:284738"},{"text":"%spark2.pyspark\n\nfrom pyspark.ml.classification import GBTClassifier\n\ngbt = GBTClassifier(featuresCol='features', labelCol=target)\n\nparamGridGBT = ParamGridBuilder().addGrid(gbt.maxDepth, [3, 5, 7])\\\n                                 .addGrid(gbt.minInstancesPerNode, [10, 20, 30])\\\n                                 .build()\n\ncrossval = CrossValidator(estimator = gbt,\n                          estimatorParamMaps = paramGridGBT,\n                          evaluator = evaluator,\n                          numFolds = 3) \n\ncvGBT = crossval.fit(train_prc)\n\ntrain_pred_cvGBT = cvGBT.transform(train_prc)\ntest_pred_cvGBT = cvGBT.transform(test_prc)\n\nprint('cross-validation GBT')\nprint('training F1: ', evaluator.evaluate(train_pred_cvGBT))\nprint('testing F1: ', evaluator.evaluate(test_pred_cvGBT))","user":"anonymous","dateUpdated":"2023-01-24T14:50:53+0000","config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"cross-validation GBT\n('training F1: ', 0.8751703579201073)\n('testing F1: ', 0.8442918343712799)\n"}]},"runtimeInfos":{},"apps":[],"jobName":"paragraph_1674568838599_2115189957","id":"20230125-015045_1094522382","dateCreated":"2023-01-24T14:00:38+0000","dateStarted":"2023-01-24T14:51:00+0000","dateFinished":"2023-01-24T17:29:50+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:284739"},{"text":"%md\n\n### Multilayer Perceptron\n\nPyspark's version of neural networks. Only has sigmoid activations. We need to tune the `layers` hyperparameter which is a list of neurons per layer and must include the sizes of the input and output layers.\n\nThe size of the input layer can be observed with `train_prc.head()` and the size of the output layer is the number of unique classes in the target\n","user":"anonymous","dateUpdated":"2023-01-25T05:41:11+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Multilayer Perceptron</h3>\n<p>Pyspark's version of neural networks. Only has sigmoid activations. We need to tune the <code>layers</code> hyperparameter which is a list of neurons per layer and must include the sizes of the input and output layers.</p>\n<p>The size of the input layer can be observed with <code>train_prc.head()</code> and the size of the output layer is the number of unique classes in the target</p>\n"}]},"apps":[],"jobName":"paragraph_1674610573897_742337389","id":"20230125-013613_1138131097","dateCreated":"2023-01-25T01:36:13+0000","dateStarted":"2023-01-25T05:41:11+0000","dateFinished":"2023-01-25T05:41:11+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:284740"},{"text":"%spark2.pyspark\n\ntrain_prc.head(1)","user":"anonymous","dateUpdated":"2023-01-25T05:40:34+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[Row(HeartDisease=0.0, features=SparseVector(18, {2: 1.0, 5: 1.0, 7: 1.0, 10: 1.0, 12: 3.1433, 13: 6.9639, 14: 1.8085, 16: 7.979}))]\n"}]},"runtimeInfos":{},"apps":[],"jobName":"paragraph_1674625206704_-289677857","id":"20230125-054006_652792971","dateCreated":"2023-01-25T05:40:06+0000","dateStarted":"2023-01-25T05:40:35+0000","dateFinished":"2023-01-25T05:40:35+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:284741"},{"text":"%spark2.pyspark\n\nfrom pyspark.sql.functions import countDistinct\ntrain_prc.select(countDistinct(target)).show()","user":"anonymous","dateUpdated":"2023-01-25T05:43:48+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----------------------------+\n|count(DISTINCT HeartDisease)|\n+----------------------------+\n|                           2|\n+----------------------------+\n\n"}]},"runtimeInfos":{},"apps":[],"jobName":"paragraph_1674625274393_707772183","id":"20230125-054114_553260391","dateCreated":"2023-01-25T05:41:14+0000","dateStarted":"2023-01-25T05:43:49+0000","dateFinished":"2023-01-25T05:44:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:284742"},{"text":"%spark2.pyspark\n\nfrom pyspark.ml.classification import MultilayerPerceptronClassifier\n\nmlp = MultilayerPerceptronClassifier(featuresCol='features', labelCol=target)\n\nparamGridMLP = ParamGridBuilder().addGrid(mlp.layers, [\n        [18, 20, 2],\n        [18, 20, 20, 2],\n        [18, 30, 2],\n        [18, 30, 30, 2]])\\\n        .addGrid(mlp.maxIter, [100,200,300]).build()\n\ncrossval = CrossValidator(estimator = mlp,\n                          estimatorParamMaps = paramGridMLP,\n                          evaluator = evaluator,\n                          numFolds = 3) \n\ncvMLP = crossval.fit(train_prc)\n\ntrain_pred_cvMLP = cvMLP.transform(train_prc)\ntest_pred_cvMLP = cvMLP.transform(test_prc)\n\nprint('cross-validation MLP')\nprint('training F1: ', evaluator.evaluate(train_pred_cvMLP))\nprint('testing F1: ', evaluator.evaluate(test_pred_cvMLP))","user":"anonymous","dateUpdated":"2023-01-25T02:44:07+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"cross-validation MLP\n('training F1: ', 0.8654006062912944)\n('testing F1: ', 0.8309315136522067)\n"}]},"runtimeInfos":{},"apps":[],"jobName":"paragraph_1674571465173_-106187956","id":"20230124-144425_254032321","dateCreated":"2023-01-24T14:44:25+0000","dateStarted":"2023-01-25T02:44:12+0000","dateFinished":"2023-01-25T05:10:31+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:284743"}],"name":"classification_template","id":"2HQ2ZJ2EX","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"spark2:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}